// <auto-generated />
using System;
using GuavaPay.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GuavaPay.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200409120545_iniddd")]
    partial class iniddd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GuavaPay.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<decimal>("AvailableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BlockedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("AgentId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AccountStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountStatuses");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowReceive")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSend")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentComission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("ComissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ComissionId");

                    b.ToTable("AgentComissions");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentCountry", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AgentId");

                    b.HasIndex("CountryId");

                    b.ToTable("AgentCountries");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentIps");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("LimitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextRenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UsedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("LimitId");

                    b.ToTable("AgentLimits");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentMandatoryField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<bool>("BirthdayMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentEndDateMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentNumberMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentProdCityMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentProdDateMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentSeriesMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("DoumentProdCountryMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("LastnameMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("NameMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("SurnameMandatory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentMandatoryFields");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentUsers");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentProdCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentProdCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocumentProdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.ClientLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSender")
                        .HasColumnType("bit");

                    b.Property<int>("LimitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextRenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UsedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LimitId");

                    b.ToTable("ClientLimits");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Comission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("AgentComissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AgentComissionPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountFrom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountTo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ComissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ComissionPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FromCountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGuava")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToCountryId")
                        .HasColumnType("int");

                    b.Property<bool>("ToSender")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FromCountryId");

                    b.HasIndex("ToCountryId");

                    b.ToTable("Comissions");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.CountryCurrencyTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CountryCurrencyTransfers");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.CountryLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("FromCountryId")
                        .HasColumnType("int");

                    b.Property<int>("LimitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextRenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToCountryId")
                        .HasColumnType("int");

                    b.Property<decimal>("UsedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("FromCountryId");

                    b.HasIndex("LimitId");

                    b.HasIndex("ToCountryId");

                    b.ToTable("CountryLimits");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FromCurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SellRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ToCurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.GuavaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GuavaUsers");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Limit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("AmountLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ComisionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("SourceAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetAccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionRequestId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceAccountId");

                    b.HasIndex("TargetAccountId");

                    b.HasIndex("TransactionRequestId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.TransactionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ConversionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FromAgentId")
                        .HasColumnType("int");

                    b.Property<int>("FromCityId")
                        .HasColumnType("int");

                    b.Property<int>("FromClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("RC")
                        .HasColumnType("int");

                    b.Property<string>("RNN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderCurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("ToAgentId")
                        .HasColumnType("int");

                    b.Property<int>("ToCityId")
                        .HasColumnType("int");

                    b.Property<int>("ToClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FromAgentId");

                    b.HasIndex("FromCityId");

                    b.HasIndex("SenderCurrencyId");

                    b.HasIndex("ToAgentId");

                    b.HasIndex("ToCityId");

                    b.HasIndex("ToClientId");

                    b.ToTable("TransactionRequests");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.TransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Account", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.AccountStatus", "AccountStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Agent", "Agent")
                        .WithMany("Accounts")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Agent", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.City", "City")
                        .WithMany("Agents")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentComission", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Agent", "Agent")
                        .WithMany("AgentComissions")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Comission", "Comission")
                        .WithMany("AgentComissions")
                        .HasForeignKey("ComissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentCountry", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Agent", "Agent")
                        .WithMany("AgentCountries")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Country", "Country")
                        .WithMany("AgentCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentIp", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Agent", "Agent")
                        .WithMany("AgentIps")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentLimit", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Agent", "Agent")
                        .WithMany("AgentLimits")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Limit", "Limit")
                        .WithMany("AgentLimits")
                        .HasForeignKey("LimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentMandatoryField", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Agent", "Agent")
                        .WithMany("AgentMandatoryFields")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.AgentUser", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Agent", "Agent")
                        .WithMany("AgentUsers")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.City", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.ClientLimit", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Client", "Client")
                        .WithMany("ClientLimits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Limit", "Limit")
                        .WithMany("ClientLimits")
                        .HasForeignKey("LimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Comission", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Country", "FromCountry")
                        .WithMany("ComissionsFrom")
                        .HasForeignKey("FromCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Country", "ToCountry")
                        .WithMany("ComissionsTo")
                        .HasForeignKey("ToCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.CountryCurrencyTransfer", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Country", "Country")
                        .WithMany("CountryCurrencyTransfers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Currency", "Currency")
                        .WithMany("CountryCurrencyTransfers")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.CountryLimit", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Agent", "Agent")
                        .WithMany("CountryLimits")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Country", "FromCountry")
                        .WithMany("FromCountryLimits")
                        .HasForeignKey("FromCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Limit", "Limit")
                        .WithMany("CountryLimits")
                        .HasForeignKey("LimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Country", "ToCountry")
                        .WithMany("ToCountryLimits")
                        .HasForeignKey("ToCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Currency", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Country", "Country")
                        .WithMany("Currencies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.CurrencyRate", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Currency", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Currency", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Currency", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Account", "SourceAccount")
                        .WithMany("SourceTransactions")
                        .HasForeignKey("SourceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Account", "TargetAccount")
                        .WithMany("TargetTransaction")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.TransactionRequest", "TransactionRequest")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuavaPay.Domain.Entities.TransactionRequest", b =>
                {
                    b.HasOne("GuavaPay.Domain.Entities.Agent", "FromAgent")
                        .WithMany()
                        .HasForeignKey("FromAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Client", "FromClient")
                        .WithMany()
                        .HasForeignKey("FromAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.City", "FromCity")
                        .WithMany()
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Currency", "SenderCurrency")
                        .WithMany()
                        .HasForeignKey("SenderCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Agent", "ToAgent")
                        .WithMany()
                        .HasForeignKey("ToAgentId");

                    b.HasOne("GuavaPay.Domain.Entities.City", "ToCity")
                        .WithMany()
                        .HasForeignKey("ToCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuavaPay.Domain.Entities.Client", "ToClient")
                        .WithMany()
                        .HasForeignKey("ToClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
